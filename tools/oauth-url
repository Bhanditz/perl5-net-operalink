#!/usr/bin/perl
#
# Assists in generating OAuth request URLs
# If you need help:
#   perldoc ./oauth-url
#
# $Id: oauth-url 13100 2009-07-02 15:40:29Z cosimo $

use strict;
use warnings;

use Getopt::Long;
use Net::OAuth;

sub random_string {
    my ($length) = @_;
    if (! $length) { $length = 16 } 
    my @chars = ('a'..'z','A'..'Z','0'..'9');
    my $str = '';
    for (1 .. $length) {
        $str .= $chars[ int rand @chars ];
    }
    return $str;
}

GetOptions(
    'step:s'             => \my $step,
    'callback:s'         => \my $callback,
    'token:s'            => \my $token,
    'token_secret:s'     => \my $token_secret,
    'nonce:s'            => \my $nonce,
    'request_method:s'   => \my $request_method,
    'request_url:s'      => \my $request_url,
    'consumer_key:s'     => \my $consumer_key,
    'consumer_secret:s'  => \my $consumer_secret,
    'signature_method:s' => \my $signature_method,
    'timestamp:s'        => \my $timestamp,
    'verifier:s'         => \my $verifier,
    'version:s'          => \my $version,
    'help'               => \my $help,
);

if ($help) {
    exec(perldoc => $0);
}

if (! $request_url) {
    die "Specify a --request_url argument!\n";
}

#if (! $token || ! $token_secret) {
#    die "Mandatory --token and --token_secret arguments!\n";
#}

$step             ||= 'request_token';
$nonce            ||= random_string(32);
$request_method   ||= 'GET';
$consumer_key     ||= 'demo_key';
$consumer_secret  ||= 'demo_secret';
$signature_method ||= 'HMAC-SHA1';
$timestamp        ||= time();
$version          ||= '1.0';

if (lc $version eq '1.0a') {
    $Net::OAuth::PROTOCOL_VERSION = Net::OAuth::PROTOCOL_VERSION_1_0A;
}

my %opt = (
    consumer_key      => $consumer_key,
    consumer_secret   => $consumer_secret,
    token             => $token,
    token_secret      => $token_secret,
    nonce             => $nonce,
    signature_method  => $signature_method,
    timestamp         => $timestamp,
    version           => $version,
    request_method    => $request_method,
    request_url       => $request_url,
    verifier          => $verifier,
);

if ($step eq 'request_token' && $callback) {
    $opt{callback} = $callback;
}

if ($step eq 'access_token' && $verifier) {
    $opt{verifier} = $verifier;
}

my $request = Net::OAuth->request($step)->new( %opt );

if ($step ne 'user_auth') {
    $request->sign;
}

print $request->to_url, "\n";


__END__

=pod

=head1 NAME

oauth-url - Generates OAuth protected-resource request URLs

=head1 SYNOPSIS

  ./oauth-url \
      --request_url='http://my.opera.com/community/api/users/status.pl?new_status=Blah' \
      --token=ATIQ5cIHMxLJSKqp49TiBEb1HHbKeIJy \
      --token_secret=a2wyJhQQq8oDjCD5x5JcLvVIN0Is7egc

=head1 DESCRIPTION

Will print out the full request URL to perform
any OAuth 1.0 and 1.0a URL against an OAuth provider.

Usage:
  ./oauth-url \
      --request_url='http://my.opera.com/community/api/users/status.pl?new_status=Blah' \
      --token=ATIQ5cIHMxLJSKqp49TiBEb1HHbKeIJy \
      --token_secret=a2wyJhQQq8oDjCD5x5JcLvVIN0Is7egc

Everything else will be assumed or randomly generated if it's not supplied,
like C<consumer_key>, C<consumer_secret>, timestamp, nonce, etc...

=head1 COMMAND LINE OPTIONS
 
=over *

=item C<step>

OAuth step, can be one of:

=over 4

=item * request_token

=item * user_auth

=item * access_token

=item * protected_resource

=back

=item callback

=item token

=item token_secret

=item nonce

=item consumer_key

=item consumer_secret

=item signature_method

=item timestamp

=item verifier (Only for OAuth 1.0a)

=item version

All OAuth parameters.
In the specs, they are prefixed by C<oauth_*>.

If C<version> is C<1.0a>, C<verifier> will also be required
in the C<access_token> spec.

=item request_method

Request method to use against the OAuth provider

=item request_url

URL of the OAuth provider

=item help

Displays the page you are reading now.

=back

=head1 SUBROUTINES/METHODS

=head2 SUBROUTINES

=head3 C<random_string()>

=head3 C<random_string($length)>

Generates a random string to be used for nonces, or for anything else.

=head1 BUGS AND LIMITATIONS

Official bug tracker for My Opera is hosted at:

  http://mydev.oslo.opera.com/trac/newticket
  https://ssl.opera.com:8028/trac/newticket

You can report a bug sending a mail to C<my-bugs@opera.com>.

=head1 SEE ALSO

=over 4

=item L<Opera::Service::OAuth>

=item L<Net::OAuth>

=back

=head1 AUTHOR

Cosimo Streppone, E<lt>cosimo@opera.comE<gt>

The My Opera Team, E<lt>my-dev@opera.comE<gt>

=head1 LICENSE AND COPYRIGHT

Copyright (c), 2009 Opera Software ASA.
All rights reserved.

